import React, { createContext, useState, useContext, useEffect } from 'react';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Check for existing login on app start
  useEffect(() => {
    const token = localStorage.getItem('authToken');
    if (token) {
      // Fetch fresh user data from API instead of relying on localStorage
      fetchUserData(token);
    }
  }, []);

  const fetchUserData = async (token) => {
    try {
      const response = await fetch('http://localhost:5000/api/auth/me', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const userData = await response.json();
        const user = userData.user || userData;
        
        // Get branch name from multiple possible fields
        const branchName = user.branchName || user.branch || 'Head Office';
        
        setUser({
          id: user.id || user._id,
          username: user.username,
          displayName: user.displayName || user.username,
          branch: branchName,
          branchName: branchName,
          branchCode: user.branchCode || 'HO',
          role: user.role || 'staff'
        });
        setIsAuthenticated(true);
      } else {
        // Token is invalid, clear it
        logout();
      }
    } catch (error) {
      console.error('Error fetching user data:', error);
      logout();
    }
  };

  const login = async (username, password) => {
    try {
      const response = await fetch('http://localhost:5000/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      const data = await response.json();

      if (response.ok) {
        // Store only the auth token
        localStorage.setItem('authToken', data.token);
        
        // Get branch name from multiple possible fields
        const branchName = data.user.branchName || data.user.branch || 'Head Office';
        
        setUser({
          id: data.user.id,
          username: data.user.username,
          displayName: data.user.displayName,
          branch: branchName,
          branchName: branchName,
          branchCode: data.user.branchCode || 'HO',
          role: data.user.role
        });
        
        setIsAuthenticated(true);
        return true;
      } else {
        console.error('Login failed:', data.message);
        return false;
      }
    } catch (error) {
      console.error('Login error:', error);
      return false;
    }
  };

  const logout = () => {
    localStorage.removeItem('authToken');
    setUser(null);
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, isAuthenticated }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  return useContext(AuthContext);
};