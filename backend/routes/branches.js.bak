const express = require('express');
const router = express.Router();
const Branch = require('../models/Branch');
const { auth } = require('../middleware/auth'); // ✅ CORRECT
const { connectDB } = require('../config/db');

// Initialize branches with default data
const initializeBranches = async () => {
  try {
    const db = await connectDB();
    const collection = db.collection('branches');
    
    const existingBranches = await collection.find({}).toArray();
    
    if (existingBranches.length === 0) {
      const defaultBranches = [
        { branchName: 'Head Office', branchCode: 'HO' },
        { branchName: 'Misti Hub', branchCode: 'MH' },
        { branchName: 'Chowringhee', branchCode: 'CW' },
        { branchName: 'Beadon Street', branchCode: 'BS' },
        { branchName: 'Baranagar', branchCode: 'BN' },
        { branchName: 'Ariadaha', branchCode: 'AR' }
      ];
      
      await collection.insertMany(defaultBranches);
      console.log('✅ Default branches created');
      return defaultBranches;
    }
    
    return existingBranches;
  } catch (error) {
    console.error('❌ Error initializing branches:', error);
    throw error;
  }
};

// GET /api/branches - Get all branches
router.get('/', auth, async (req, res) => {
  try {
    const branches = await initializeBranches();
    res.json(branches);
  } catch (error) {
    console.error('Error fetching branches:', error);
    res.status(500).json({ message: 'Internal server error', error: error.message });
  }
});

// POST /api/branches - Create new branch
router.post('/', auth, async (req, res) => {
  try {
    const { branchName, branchCode } = req.body;
    
    if (!branchName || !branchCode) {
      return res.status(400).json({ message: 'Branch name and code are required' });
    }
    
    const db = await connectDB();
    const collection = db.collection('branches');
    
    // Check if branch already exists
    const existing = await collection.findOne({ 
      $or: [{ branchName }, { branchCode }] 
    });
    
    if (existing) {
      return res.status(400).json({ message: 'Branch name or code already exists' });
    }
    
    const newBranch = {
      branchName,
      branchCode: branchCode.toUpperCase(),
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const result = await collection.insertOne(newBranch);
    newBranch._id = result.insertedId;
    
    res.status(201).json(newBranch);
  } catch (error) {
    console.error('Error creating branch:', error);
    res.status(500).json({ message: 'Failed to create branch', error: error.message });
  }
});

module.exports = router;