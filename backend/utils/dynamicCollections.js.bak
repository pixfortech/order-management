const mongoose = require('mongoose');

// Simple order schema for dynamic collections
const orderSchema = new mongoose.Schema({
  customerName: String,
  phone: String,
  address: String,
  email: String,
  pincode: String,
  city: String,
  state: String,
  occasion: String,
  orderPrefix: String,
  orderNumber: { type: String }, // Removed unique constraint
  orderDate: String,
  deliveryDate: String,
  deliveryTime: String,
  notes: String,
  boxes: [{
    items: [{
      name: String,
      qty: Number,
      price: Number,
      unit: String,
      amount: Number,
      customName: Boolean
    }],
    discount: Number,
    total: Number,
    boxCount: Number
  }],
  extraDiscount: {
    value: { type: Number, default: 0 },
    type: { type: String, default: 'value' }
  },
  advancePaid: Number,
  totalBoxCount: Number,
  grandTotal: Number,
  balance: Number,
  status: {
    type: String,
    enum: ['saved', 'held', 'auto-saved'],
    default: 'saved'
  },
  branch: String,
  branchCode: String,
  createdBy: String
}, { 
  timestamps: true 
});

// Simple customer schema
const customerSchema = new mongoose.Schema({
  name: String,
  phone: String,
  email: String,
  address: String,
  pincode: String,
  city: String,
  state: String,
  branch: String,
  branchCode: String,
  totalOrders: { type: Number, default: 0 },
  totalSpent: { type: Number, default: 0 },
  lastOrderDate: Date
}, { 
  timestamps: true 
});

const getOrderModel = (branchCode) => {
  try {
    // ‚úÖ FIXED: Consistent case handling
    console.log('üè™ Creating order model for branchCode:', branchCode);
    
    if (!branchCode || typeof branchCode !== 'string') {
      throw new Error(`Invalid branchCode: ${branchCode}`);
    }
    
    // Always use lowercase for collection names to match your database
    const normalizedBranchCode = branchCode.toLowerCase();
    const collectionName = `orders_${normalizedBranchCode}`;
    const modelName = `Order_${branchCode.toUpperCase()}`; // Model name can be uppercase
    
    console.log('üì¶ Collection name:', collectionName);
    console.log('üè∑Ô∏è Model name:', modelName);
    
    // Check if model already exists
    if (mongoose.models[modelName]) {
      console.log('‚ôªÔ∏è Reusing existing model:', modelName);
      return mongoose.models[modelName];
    }
    
    // Create and return new model
    console.log('üÜï Creating new model:', modelName);
    const model = mongoose.model(modelName, orderSchema, collectionName);
    
    console.log('‚úÖ Order model created successfully');
    return model;
    
  } catch (error) {
    console.error('‚ùå Error in getOrderModel:', error);
    throw error;
  }
};

const getCustomerModel = (branchCode) => {
  try {
    // ‚úÖ FIXED: Consistent case handling
    console.log('üë§ Creating customer model for branchCode:', branchCode);
    
    if (!branchCode || typeof branchCode !== 'string') {
      throw new Error(`Invalid branchCode: ${branchCode}`);
    }
    
    // Always use lowercase for collection names to match your database
    const normalizedBranchCode = branchCode.toLowerCase();
    const collectionName = `customers_${normalizedBranchCode}`;
    const modelName = `Customer_${branchCode.toUpperCase()}`; // Model name can be uppercase
    
    console.log('üì¶ Collection name:', collectionName);
    console.log('üè∑Ô∏è Model name:', modelName);
    
    // Check if model already exists
    if (mongoose.models[modelName]) {
      console.log('‚ôªÔ∏è Reusing existing model:', modelName);
      return mongoose.models[modelName];
    }
    
    // Create and return new model
    console.log('üÜï Creating new model:', modelName);
    const model = mongoose.model(modelName, customerSchema, collectionName);
    
    console.log('‚úÖ Customer model created successfully');
    return model;
    
  } catch (error) {
    console.error('‚ùå Error in getCustomerModel:', error);
    throw error;
  }
};

module.exports = {
  getOrderModel,
  getCustomerModel
};